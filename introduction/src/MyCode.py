from manim import *
from pygments.formatters import HtmlFormatter
from manim.mobject.text.code_mobject import highlight, guess_lexer_for_filename, _insert_line_numbers_in_html, get_lexer_by_name

from darcula_style import DarculaStyle

class MyCode(Code):

	def _gen_html_string(self):
			"""Function to generate html string with code highlighted and stores in variable html_string."""
			self.html_string = _hilite_me(
				self.code_string,
				self.language,
				self.style,
				self.insert_line_no,
				"border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;",
				self.file_path,
				self.line_no_from,
			)

			if self.generate_html_file:
				os.makedirs(
					os.path.join("assets", "codes", "generated_html_files"),
					exist_ok=True,
				)
				with open(
					os.path.join(
						"assets",
						"codes",
						"generated_html_files",
						self.file_name + ".html",
					),
					"w",
				) as file:
					file.write(self.html_string)

def _hilite_me(
    code,
    language,
    style,
    insert_line_no,
    divstyles,
    file_path,
    line_no_from,
):
    """Function to highlight code from string to html.

    Parameters
    ---------
    code : :class:`str`
        Code string.
    language : :class:`str`
        The name of the programming language the given code was written in.
    style : :class:`str`
        Code style name.
    insert_line_no : :class:`bool`
        Defines whether line numbers should be inserted in the html file.
    divstyles : :class:`str`
        Some html css styles.
    file_path : :class:`str`
        Path of code file.
    line_no_from : :class:`int`
        Defines the first line's number in the line count.
    """
    style = style or "colorful"
    defstyles = "overflow:auto;width:auto;"

    formatter = HtmlFormatter(
        style=DarculaStyle,
        full=True,
        cssfile="darcula.css",
        linenos=False,
        noclasses=True,
        cssclass="",
        cssstyles=defstyles + divstyles,
        prestyles="margin: 0",
    )
    if language is None and file_path:
        lexer = guess_lexer_for_filename(file_path, code)
        html = highlight(code, lexer, formatter)
    elif language is None:
        raise ValueError(
            "The code language has to be specified when rendering a code string",
        )
    else:
        html = highlight(code, get_lexer_by_name(language, **{}), formatter)
    if insert_line_no:
        html = _insert_line_numbers_in_html(html, line_no_from)
    html = "<!-- HTML generated by Code() -->" + html
    return html

	